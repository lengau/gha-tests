name: Work with temporary files
on:
  push:
  workflow_dispatch:
jobs:
  example:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
      fail-fast: false
    steps:
      - if: ${{ always() }}
        shell: bash
        run: |
          set +e
          if [[ -n ${TMPDIR+1} ]]; then
            echo "TMPDIR=${TMPDIR}"
          else
            echo "TMPDIR is unset, as we see on Ubuntu and Windows."
          fi
          echo -n 'mktemp location: '
          which mktemp
          echo 'On Ubuntu, this will create a file under /tmp and return its name, as mktemp falls back to /tmp since $TMPDIR is not set'
          echo 'This can be overridden, but software not aware of GitHub Actions may not do so.'
          echo 'https://manpages.ubuntu.com/manpages/jammy/man1/mktemp.1.html'
          echo
          echo 'On macOS, this will fail as _CS_DARWIN_USER_TEMP_DIR (which also gets set to $TMPDIR) is on a read-only filesystem.'
          echo 'https://ss64.com/osx/mktemp.html'
          echo
          echo "On Windows, it create a temporary file in git bash's /tmp, which is directed to %TMP%, which is %CSIDL_LOCAL_APPDATA%\Temp"
          echo 'https://learn.microsoft.com/en-us/windows/deployment/usmt/usmt-recognized-environment-variables'
          mktemp 2>&1
      - if: ${{ always() }}
        shell: python
        run: |
          from __future__ import print_function
          from os import environ
          import tempfile
          print("Now using Python's temporary directory checker: https://docs.python.org/3/library/tempfile.html#tempfile.gettempdir")
          print("On Ubuntu, this will print /tmp, as that's the first directory available in Python's search list.")
          print("On macOS, it will print the contents of $TMPDIR, which is in /var/folders. This should be the same base as the location from bash above.")
          print("https://docs.python.org/3/library/tempfile.html#tempfile.gettempdir")
          print("Relevant environment variables:\nTMPDIR={}\nTEMP={}\nTMP={}\n".format(environ.get('TMPDIR'),environ.get('TEMP'),environ.get('TMP')))
          print(tempfile.gettempdir())
          print("\nNow we create a temporary file and see similar effects on the various platforms as from the bash example:")
          try:
            with tempfile.NamedTemporaryFile() as temp:
              print("File created successfully.")
              print("File: {}".format(temp.name))
          except Exception as e:
            print("File creation failed. The error was:")
            print(repr(e))
            print("This is what we expect on macOS, as $TMPDIR is on a read-only FS.")
          else:
            print("On Ubuntu and Windows we have success, but different behaviour.")
            print("On Ubuntu, it fell-back to the platform-specific location of /tmp.")
            print("On Windows, it got the directory from the environment variable TEMP")

